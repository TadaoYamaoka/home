// 参考 http://maaash.jp/page/3/

#include <windows.h>
#include <stdio.h>
#include "resource.h"
#include "portaudio.h"

INT_PTR CALLBACK DlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
int stream_callback(const void *input, void *output, unsigned long frameCount, const PaStreamCallbackTimeInfo *timeInfo, PaStreamCallbackFlags statusFlags, void *userData);
extern "C" void rdft(int n, int isgn, double *a, int *ip, double *w);

const int DEVICE_SAMPLE_RATE = 8000;
const int SAMPLE_RATE = 2000;
const int DIV = DEVICE_SAMPLE_RATE/SAMPLE_RATE;
const int BUFLEN = 256; // レイテンシー0.1未満のバッファサイズ
const int FFTLEN = 512;
const int FFTLENSQRT = 23;
HWND hDlg;
HDC hdcBack;
RECT rcDlg;
HPEN hpenWave;
HPEN hpenCenter;
const int wavebuf_size = 640*64;
short wavebuf[wavebuf_size];	// 表示用波形データ
int p_wavebuf = 0;
const double threshold = 1024*24;

// 平均律テーブル
double temperament[4][13] = {
	{127.0887967, 134.6458898, 142.652351, 151.1349012, 160.1218501, 169.6431908, 179.7306999, 190.4180434, 201.7408895, 213.7370271, 226.4464921, 239.9117012, 254.1775933},
	{254.1775933, 269.2917795, 285.304702, 302.2698024, 320.2437002, 339.2863816, 359.4613997, 380.8360868, 403.481779, 427.4740541, 452.8929841, 479.8234024, 508.3551866},
	{508.3551866, 538.5835591, 570.609404, 604.5396049, 640.4874005, 678.5727632, 718.9227994, 761.6721737, 806.963558, 854.9481082, 905.7859682, 959.6468047, 1016.710373},
	{1016.710373, 1077.167118, 1141.218808, 1209.07921, 1280.974801, 1357.145526, 1437.845599, 1523.344347, 1613.927116, 1709.896216, 1811.571936, 1919.293609, 2033.420746}
};
const wchar_t *scale_str[] = {L"C", L"C#", L"D", L"D#", L"E", L"F", L"F#", L"G", L"G#", L"A", L"A#", L"B"};
const double FREQ_C[] = {127.0887967, 254.1775933, 508.3551866, 1016.710373, 2033.420746};

int wmain()
{
	PaError err = Pa_Initialize();
	if (err != paNoError) {
		perror("error:Pa_Initialize\n");
		goto EXIT;
	}

	int numDevices = Pa_GetDeviceCount();
	for(int i = 0; i < numDevices; i++)
	{
		const PaDeviceInfo *deviceInfo = Pa_GetDeviceInfo(i);
		printf("%d:%d:%d:%d:%f:%s\n",
			i,
			deviceInfo->hostApi,
			deviceInfo->maxInputChannels,
			deviceInfo->maxOutputChannels,
			deviceInfo->defaultSampleRate,
			deviceInfo->name);
	}

	PaStream* stream = NULL;
	PaStreamParameters param;
	param.device = 0;
	param.channelCount = 1;
	param.sampleFormat = paInt16;
	param.suggestedLatency = Pa_GetDeviceInfo(param.device)->defaultLowInputLatency;
	param.hostApiSpecificStreamInfo = 0;

	err = Pa_OpenStream(
		&stream, // stream
		&param, // inputParameters
		NULL, // outputParameters
		DEVICE_SAMPLE_RATE, // sampleRate
		BUFLEN, // framesPerBuffer
		paClipOff, // streamFlags
		stream_callback, // streamCallback
		NULL // userData
		);
	if (err != paNoError) {
		perror("error:Pa_OpenStream\n");
		goto EXIT;
	}

	// ダイアログの作成
	hDlg = CreateDialogParam(GetModuleHandle(NULL), MAKEINTRESOURCE(IDD_DIALOG1), NULL, DlgProc, 0);
	// バックバッファーの作成
	GetClientRect(hDlg, &rcDlg);
	HBITMAP hBmp = CreateBitmap(rcDlg.right, rcDlg.bottom, 1, 32, NULL);
	hdcBack = CreateCompatibleDC(NULL);
	SelectObject(hdcBack, hBmp);
	// ペンの作成
	hpenWave = CreatePen(PS_SOLID, 1, RGB(255, 128, 0));
	hpenCenter = CreatePen(PS_SOLID, 1, RGB(128, 255, 128));

	ShowWindow(hDlg, SW_SHOW);

	err = Pa_StartStream(stream); // デバイス起動、Buffer受け渡し開始

	//メッセージループ
	MSG msg;
	while(GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	err = Pa_StopStream(stream); // デバイス停止

EXIT:
	if (stream)
		Pa_CloseStream(stream); // Buffer破棄
	Pa_Terminate();

	return 0;
}

INT_PTR CALLBACK DlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	if(uMsg == WM_CLOSE)
	{
		DestroyWindow(hDlg);
		PostQuitMessage(0);
	}
	return FALSE;
}

int stream_callback(const void *input, void *output, unsigned long frameCount, const PaStreamCallbackTimeInfo *timeInfo, PaStreamCallbackFlags statusFlags, void *userData)
{
	const short *in = (const short*)input;

	// 波形データを格納
	for (unsigned int i = 0; i < frameCount; i++)
	{
		wavebuf[p_wavebuf] = in[i];
		p_wavebuf = (p_wavebuf+1) % wavebuf_size; // リングバッファ
	}

	// 背景クリア
	PatBlt(hdcBack, 0, 0, rcDlg.right, rcDlg.bottom, BLACKNESS);

	// 波形描画
	SelectObject(hdcBack, hpenWave);
	MoveToEx(hdcBack, 0, rcDlg.bottom / 4, NULL);
	for (int x = 0, p = p_wavebuf - 1 + wavebuf_size - rcDlg.right*64; x < rcDlg.right; x++, p+=64)
	{
		LineTo(hdcBack, x, rcDlg.bottom/4 + wavebuf[p%wavebuf_size]/128);
	}

	// センターラインを引く
	SelectObject(hdcBack, hpenCenter);
	MoveToEx(hdcBack, 0, rcDlg.bottom / 4, NULL);
	LineTo(hdcBack, rcDlg.right, rcDlg.bottom / 4);

	// フーリエ変換
	double a[FFTLEN];
	for (int i = FFTLEN-1, p = p_wavebuf + wavebuf_size - 1; i >= 0; i--, p-=DIV) // 間引いて格納
	{
		a[i] = wavebuf[p%wavebuf_size];
	}
	int ip[FFTLENSQRT+2];
	ip[0] = 0;
	double w[FFTLEN*5/4]; // cos/sin work table
	rdft(FFTLEN, 1, a, ip, w);

	// スペクトルグラムを表示
	double peek = 0;
	int peek_k = 0;
	for (int x = 32; x < FFTLEN/2; x++)
	{
		double y = abs(a[2*x]) + abs(a[2*x+1]);
		MoveToEx(hdcBack, x*2, rcDlg.bottom-17, NULL);
		LineTo(hdcBack, x*2, rcDlg.bottom-17 - y/1024);
		// ピークの検出
		if (y > threshold && y > peek)
		{
			peek = y;
			peek_k = x;
		}
	}
	for (int x = 32; x < FFTLEN/2; x+=64)
	{
		wchar_t str[8];
		int len = swprintf(str, L"%d", SAMPLE_RATE*x/FFTLEN);
		TextOut(hdcBack, x*2, rcDlg.bottom-16, str, len);
	}

	// 音階判定
	double peek_freq = double(SAMPLE_RATE*peek_k)/FFTLEN;
	int peek_scal_i = 0;
	for (int i = 0; i < 4; i++)
	{
		if (FREQ_C[i] <= peek_freq && peek_freq < FREQ_C[i+1])
		{
			peek_scal_i = i+3;
			break;
		}
	}
	int peek_scal_n = 0;
	if (peek_scal_i > 0)
	{
		for (int n = 0; n < 12; n++)
		{
			if (temperament[peek_scal_i-3][n] <= peek_freq && peek_freq < temperament[peek_scal_i-3][n+1])
			{
				peek_scal_n = n;
				break;
			}
		}
	}

	// 情報表示
	static DWORD told = 0;
	DWORD t = GetTickCount();
	wchar_t buf[128];
	int len = swprintf(buf, L"%03dms, %1.1f, %4.1fHz, %s%d", t - told, double(SAMPLE_RATE)/FFTLEN, peek_freq, scale_str[peek_scal_n], peek_scal_i);
	TextOut(hdcBack, 0, 0, buf, len);
	told = t;

	// バックバッファをダイアログにフリップする
	HDC hdc = ::GetDC(hDlg);
	BitBlt(hdc, 0, 0, rcDlg.right, rcDlg.bottom, hdcBack, 0, 0, SRCCOPY);
	ReleaseDC(hDlg, hdc);

	return paContinue;
}